import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\n\nexport default function App() {\n  const [level, setLevel] = useStickyState<number>(35, 'gf_level')\n  const [cups, setCups] = useStickyState<number>(1, 'gf_cups')\n  const [name, setName] = useStickyState<string>('Dad', 'gf_name')\n  const [dark, setDark] = useStickyState<boolean>(false, 'gf_dark')\n  const [copied, setCopied] = useState<string | null>(null)\n  const [announce, setAnnounce] = useState('')\n  const sliderRef = useRef<HTMLInputElement | null>(null)\n\n  useEffect(() => {\n    try {\n      const params = new URLSearchParams(window.location.search)\n      const l = params.get('level')\n      const c = params.get('cups')\n      const n = params.get('name')\n      if (l !== null && !Number.isNaN(parseInt(l))) setLevel(clamp(parseInt(l), 0, 100))\n      if (c !== null && !Number.isNaN(parseInt(c))) setCups(clamp(parseInt(c), 0, 4))\n      if (n !== null) setName(n)\n    } catch {}\n  }, [])\n\n  useEffect(() => {\n    try {\n      const url = new URL(window.location.href)\n      url.searchParams.set('level', String(Math.round(level)))\n      url.searchParams.set('cups', String(cups))\n      url.searchParams.set('name', name || 'Dad')\n      window.history.replaceState({}, '', url.toString())\n    } catch {}\n  }, [level, cups, name])\n\n  useEffect(() => {\n    const d = descriptorFor(level)\n    setAnnounce(`${d.title}. ${d.subtitle}`)\n  }, [level])\n\n  useEffect(() => {\n    const onKey = (e: KeyboardEvent) => {\n      if (e.key === 'ArrowLeft') setLevel((v) => clamp(v - 5))\n      if (e.key === 'ArrowRight') setLevel((v) => clamp(v + 5))\n      if (e.key.toLowerCase() === 'r') handleReset()\n      if (/^[1-5]$/.test(e.key)) {\n        const map: Record<string, number> = { '1': 10, '2': 30, '3': 50, '4': 70, '5': 90 }\n        setLevel(map[e.key])\n      }\n    }\n    window.addEventListener('keydown', onKey)\n    return () => window.removeEventListener('keydown', onKey)\n  }, [])\n\n  const face = useMemo(() => faceFor(level), [level])\n  const tone = useMemo(() => toneFor(level), [level])\n  const descriptor = useMemo(() => descriptorFor(level), [level])\n  const recommendation = useMemo(() => recommendationFor(level, cups), [level, cups])\n  const bgGradient = `bg-gradient-to-br ${tone.bgFrom} ${tone.bgTo}`\n\n  const handleCopy = async (text: string) => {\n    try { await navigator.clipboard.writeText(text); setCopied('Copied!'); setTimeout(()=>setCopied(null),1200) }\n    catch { setCopied('Couldn‚Äôt copy'); setTimeout(()=>setCopied(null),1500) }\n  }\n\n  const shareUrl = () => {\n    try { const url = new URL(window.location.href); url.searchParams.set('level', String(Math.round(level))); url.searchParams.set('cups', String(cups)); url.searchParams.set('name', name || 'Dad'); return url.toString() } catch { return '' }\n  }\n\n  const shareNative = async () => {\n    const url = shareUrl(); const title = 'Grump Factor'; const text = `Where‚Äôs your grump factor today, ${name || 'Dad'}? Slide to rate: ${url}`\n    // @ts-ignore\n    if (navigator.share) { try { // @ts-ignore\n      await navigator.share({ title, text, url }) } catch {} } else { handleCopy(url) }\n  }\n\n  const handleReset = () => { setLevel(35); setCups(1) }\n\n  const marks = [0,20,40,60,80,100]\n  const quickSet = [10,30,50,70,90]\n\n  const messageTemplates = useMemo(()=>buildMessages({ level, cups, name, url: shareUrl() }), [level, cups, name])\n\n  return (\n    <div className={dark ? 'dark' : ''}>\n      <div className={`min-h-screen ${bgGradient} text-gray-900 dark:text-gray-50 flex items-center justify-center p-6 transition-colors`}>\n        <div className=\"w-full max-w-3xl\">\n          <div className=\"rounded-2xl shadow-xl bg-white/80 dark:bg-zinc-900/80 backdrop-blur p-6 md:p-8 border border-black/5 dark:border-white/10\">\n            <header className=\"flex items-start justify-between gap-3\">\n              <div>\n                <h1 className=\"text-3xl md:text-4xl font-extrabold tracking-tight\">Sliding Scale of Grumpiness</h1>\n                <p className=\"text-sm md:text-base text-gray-600 dark:text-gray-300 mt-1\">Rate the current <span className=\"font-semibold\">Grump Factor</span> from sunshine to thunderclouds ‚òÅÔ∏è‚ö°</p>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <button className=\"rounded-full px-3 py-1 text-xs font-semibold border dark:border-white/20 bg-white/70 dark:bg-zinc-800\" onClick={() => setDark((d)=>!d)} aria-label=\"Toggle dark mode\">{dark ? 'Light' : 'Dark'}</button>\n                <span className={`inline-flex items-center rounded-full px-3 py-1 text-xs font-semibold ${tone.pillBg} ${tone.pillText} border ${tone.pillBorder}`}>Now: {Math.round(level)}/100</span>\n              </div>\n            </header>\n\n            <main className=\"mt-6 md:mt-8 grid gap-6\">\n              <div className=\"flex flex-col md:flex-row md:items-end gap-4\">\n                <div className=\"grow\">\n                  <label className=\"text-xs uppercase tracking-wide text-gray-500 dark:text-gray-400\">Who are we checking on?</label>\n                  <input value={name} onChange={(e)=>setName(e.target.value)} placeholder=\"Dad\" className=\"mt-1 w-full rounded-xl border border-gray-300 dark:border-white/20 bg-white/70 dark:bg-zinc-800 px-3 py-2 outline-none focus:ring-2 focus:ring-black/10 dark:focus:ring-white/20\" />\n                </div>\n                <div>\n                  <label className=\"text-xs uppercase tracking-wide text-gray-500 dark:text-gray-400\">Coffee level</label>\n                  <div className=\"mt-1 flex items-center gap-1\">\n                    {Array.from({length:5}).map((_, i)=>(\n                      <button key={i} onClick={()=>setCups(i)} className={`text-2xl leading-none rounded-xl px-2 py-1 border ${i<=cups?'bg-amber-50 dark:bg-amber-900/30 border-amber-300 dark:border-amber-600':'bg-transparent border-transparent'}`} aria-label={`${i} cup${i===1?'':'s'} of coffee`} title={`${i} cup${i===1?'':'s'} of coffee`}>{i<=cups?'‚òï':'ü´ñ'}</button>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <AnimatePresence mode=\"popLayout\" initial={false}>\n                  <motion.div key={face.emoji} className=\"text-[64px] md:text-[80px] leading-none select-none\" aria-hidden initial={{scale:0.9, rotate:-5, opacity:0}} animate={{scale:1, rotate:0, opacity:1}} exit={{scale:0.9, rotate:5, opacity:0}} transition={{type:'spring', stiffness:300, damping:20}}>{face.emoji}</motion.div>\n                </AnimatePresence>\n                <div>\n                  <div className={`text-xl md:text-2xl font-bold ${tone.text}`}>{descriptor.title}</div>\n                  <div className=\"text-gray-600 dark:text-gray-300 text-sm md:text-base\">{descriptor.subtitle}</div>\n                </div>\n              </div>\n\n              <div className=\"pt-2\">\n                <label htmlFor=\"grump-slider\" className=\"sr-only\">Grump Factor</label>\n                <input id=\"grump-slider\" ref={sliderRef} type=\"range\" min={0} max={100} step={1} value={level} onChange={(e)=>setLevel(Number(e.target.value))} aria-valuemin={0} aria-valuemax={100} aria-valuenow={level} aria-valuetext={`${Math.round(level)} out of 100`} className=\"w-full appearance-none h-3 rounded-full outline-none\" style={{ background: `linear-gradient(to right, ${tone.track} ${level}%, ${dark?'#27272a':'#e5e7eb'} ${level}%)` }} />\n                <style>{`#grump-slider::-webkit-slider-thumb { -webkit-appearance: none; appearance: none; width: 28px; height: 28px; border-radius: 9999px; background: white; border: 3px solid ${tone.thumbBorder}; box-shadow: 0 2px 8px rgba(0,0,0,.25); cursor: grab; } #grump-slider:active::-webkit-slider-thumb { cursor: grabbing; } #grump-slider::-moz-range-thumb { width: 28px; height: 28px; border-radius: 9999px; background: white; border: 3px solid ${tone.thumbBorder}; box-shadow: 0 2px 8px rgba(0,0,0,.25); cursor: grab; }`}</style>\n                <div className=\"relative mt-3 h-5\">\n                  <div className=\"absolute inset-x-0 top-2 flex justify-between\">\n                    {[0,20,40,60,80,100].map((m)=>(<div key={m} className={`h-3 w-[2px] ${dark?'bg-zinc-600':'bg-gray-300'}`} />))}\n                  </div>\n                  <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400\"><span>0</span><span>20</span><span>40</span><span>60</span><span>80</span><span>100</span></div>\n                </div>\n              </div>\n\n              <div>\n                <p className=\"text-xs uppercase tracking-wide text-gray-500 dark:text-gray-400 mb-2\">Quick set</p>\n                <div className=\"grid grid-cols-5 gap-2\">\n                  {[10,30,50,70,90].map((val, idx)=>(\n                    <button key={val} className={`group rounded-2xl border px-3 py-2 text-2xl transition ${valToTone(val).btnBg} ${valToTone(val).btnBorder} hover:shadow-md`} onClick={()=>setLevel(val)} aria-label={`Set to ${labels[idx]}`} title={`Set to ${labels[idx]}`}>\n                      <span className=\"block group-active:scale-95\">{faces[idx].emoji}</span>\n                      <span className=\"block text-[10px] mt-1 text-gray-600 dark:text-gray-300\">{labels[idx]}</span>\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              <div className={`rounded-xl p-4 border ${dark?'border-white/15 bg-zinc-900/60':'border-black/10 bg-white/70'}`}>\n                <div className=\"text-sm font-semibold mb-1\">Suggested approach</div>\n                <div className=\"text-sm text-gray-700 dark:text-gray-300\">{recommendation}</div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-3 pt-2\">\n                <button className={`rounded-xl px-4 py-2 font-semibold border ${tone.btnBorder} ${tone.btnBg} ${tone.btnText} hover:shadow`} onClick={shareNative}>Share link</button>\n                <button className=\"rounded-xl px-4 py-2 font-semibold border border-gray-300 dark:border-white/20 bg-white dark:bg-zinc-800 hover:shadow\" onClick={()=>handleCopy(shareUrl())}>Copy link</button>\n                <button className=\"rounded-xl px-4 py-2 font-semibold border border-gray-300 dark:border-white/20 bg-white dark:bg-zinc-800 hover:shadow\" onClick={()=>handleCopy(messageTemplates.playful)}>Copy playful text</button>\n                <button className=\"rounded-xl px-4 py-2 font-semibold border border-gray-300 dark:border-white/20 bg-white dark:bg-zinc-800 hover:shadow\" onClick={()=>handleCopy(messageTemplates.straight)}>Copy simple text</button>\n                <button className=\"rounded-xl px-4 py-2 font-semibold border border-gray-300 dark:border-white/20 bg-white dark:bg-zinc-800 hover:shadow\" onClick={()=>handleCopy(messageTemplates.emoji)}>Copy emoji text</button>\n                <button className=\"rounded-xl px-4 py-2 font-semibold border border-gray-300 dark:border-white/20 bg-white dark:bg-zinc-800 hover:shadow\" onClick={handleReset}>Reset</button>\n                <button className=\"rounded-xl px-4 py-2 font-semibold border border-gray-300 dark:border-white/20 bg-white dark:bg-zinc-800 hover:shadow\" onClick={()=>setLevel(Math.floor(Math.random()*101))}>Randomize</button>\n                {copied && <span className=\"text-sm text-gray-600 dark:text-gray-300 self-center\">{copied}</span>}\n              </div>\n\n              <div aria-live=\"polite\" className=\"sr-only\">{announce}</div>\n            </main>\n\n            <footer className=\"mt-6 border-t dark:border-white/10 border-black/10 pt-4 text-xs text-gray-500 dark:text-gray-400\">Made with ‚ù§Ô∏è for checking in on {name || 'Dad'}. Keyboard: ‚Üê/‚Üí to adjust, 1‚Äì5 jump, R to reset. URL saves your settings.</footer>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction clamp(n: number, min = 0, max = 100) { return Math.min(max, Math.max(min, n)) }\n\nfunction useStickyState<T>(initial: T, key: string): [T, (v: T | ((v: T) => T)) => void] {\n  const [value, setValue] = useState<T>(() => { try { const stored = localStorage.getItem(key); return stored ? (JSON.parse(stored) as T) : initial } catch { return initial } })\n  useEffect(()=>{ try { localStorage.setItem(key, JSON.stringify(value)) } catch {} }, [key, value])\n  return [value, setValue]\n}\n\nconst labels = ['happy','slightly grumpy','grumpy','very grumpy','extremely grumpy']\nconst faces = [{emoji:'üòÑ'},{emoji:'üôÇ'},{emoji:'üòê'},{emoji:'üò†'},{emoji:'üò°'}]\n\nfunction faceFor(level:number){ if(level<=20)return{emoji:'üòÑ'}; if(level<=40)return{emoji:'üôÇ'}; if(level<=60)return{emoji:'üòê'}; if(level<=80)return{emoji:'üò†'}; return{emoji:'üò°'} }\nfunction descriptorFor(level:number){ if(level<=20)return{title:'Sunny disposition',subtitle:'Whistling while making coffee.'}; if(level<=40)return{title:'Mild clouds',subtitle:'May require one dad joke to clear.'}; if(level<=60)return{title:'Grump adjacent',subtitle:'Proceed with snacks and small talk.'}; if(level<=80)return{title:'Storm watch',subtitle:'Caffeine before conversation recommended.'}; return{title:'Full curmudgeon',subtitle:'Deploy hugs, retreat cautiously.'} }\n\nfunction toneFor(level:number){ if(level<=20){return{ text:'text-green-800 dark:text-green-300', track:'#86efac', thumbBorder:'#22c55e', bgFrom:'from-green-100 dark:from-green-950', bgTo:'to-emerald-100 dark:to-emerald-950', pillBg:'bg-green-100/80 dark:bg-green-900/40', pillText:'text-green-800 dark:text-green-200', pillBorder:'border-green-300/70 dark:border-green-700/60', btnBg:'bg-green-600', btnText:'text-white', btnBorder:'border-green-700', } as const } if(level<=40){return{ text:'text-lime-800 dark:text-lime-300', track:'#bef264', thumbBorder:'#84cc16', bgFrom:'from-lime-100 dark:from-lime-950', bgTo:'to-amber-100 dark:to-amber-950', pillBg:'bg-lime-100/80 dark:bg-lime-900/40', pillText:'text-lime-800 dark:text-lime-200', pillBorder:'border-lime-300/70 dark:border-lime-700/60', btnBg:'bg-lime-600', btnText:'text-white', btnBorder:'border-lime-700', } as const } if(level<=60){return{ text:'text-amber-800 dark:text-amber-300', track:'#fcd34d', thumbBorder:'#f59e0b', bgFrom:'from-amber-100 dark:from-amber-950', bgTo:'to-orange-100 dark:to-orange-950', pillBg:'bg-amber-100/80 dark:bg-amber-900/40', pillText:'text-amber-800 dark:text-amber-200', pillBorder:'border-amber-300/70 dark:border-amber-700/60', btnBg:'bg-amber-600', btnText:'text-white', btnBorder:'border-amber-700', } as const } if(level<=80){return{ text:'text-orange-800 dark:text-orange-300', track:'#fdba74', thumbBorder:'#f97316', bgFrom:'from-orange-100 dark:from-orange-950', bgTo:'to-red-100 dark:to-red-950', pillBg:'bg-orange-100/80 dark:bg-orange-900/40', pillText:'text-orange-800 dark:text-orange-200', pillBorder:'border-orange-300/70 dark:border-orange-700/60', btnBg:'bg-orange-600', btnText:'text-white', btnBorder:'border-orange-700', } as const } return{ text:'text-red-800 dark:text-red-300', track:'#fca5a5', thumbBorder:'#ef4444', bgFrom:'from-rose-100 dark:from-rose-950', bgTo:'to-red-100 dark:to-red-950', pillBg:'bg-red-100/80 dark:bg-red-900/40', pillText:'text-red-800 dark:text-red-200', pillBorder:'border-red-300/70 dark:border-red-700/60', btnBg:'bg-red-600', btnText:'text-white', btnBorder:'border-red-700', } as const }\n\nfunction valToTone(_val:number){ return { btnBg:'bg-white dark:bg-zinc-800', btnBorder:'border-gray-200 dark:border-white/15' } as const }\nfunction recommendationFor(level:number, cups:number){ let base='Offer warmth and keep it light.'; if(level<=20)base='No notes‚Äîlead with a smile and maybe a quick win for the day.'; else if(level<=40)base='Open with a light check‚Äëin and one (1) tasteful dad joke.'; else if(level<=60)base='Start with small talk; bring snacks or a coffee assist.'; else if(level<=80)base='Give space, deliver caffeine, circle back with empathy.'; else base='Proceed with maximum kindness. Coffee and a hug are your best bets.'; if(cups===0)base+=' (Note: zero cups detected‚Äîespresso diplomacy advised.)'; if(cups>=3)base+=' (Caution: caffeine saturation; avoid rapid‚Äëfire questions.)'; return base }\nfunction labelFor(level:number){ if(level<=20)return'happy'; if(level<=40)return'slightly grumpy'; if(level<=60)return'grumpy'; if(level<=80)return'very grumpy'; return'extremely grumpy' }\nfunction buildMessages({ level, cups, name, url }: { level:number; cups:number; name:string; url:string }){ const who=name||'Dad'; const label=labelFor(level); const cupText=`${cups} cup${cups===1?'':'s'}`; return { playful:`Morning ${who}! Quick *grump check*: are we at ${label}? I logged ${cupText} ‚òï so far. Slide to report in: ${url}`, straight:`Hey ${who}, where‚Äôs your grump factor today (0‚Äì100)? Slide and tell me: ${url}`, emoji:`Grump factor today? üëâ üòÑ‚ÄìüôÇ‚Äìüòê‚Äìüò†‚Äìüò°  Slide: ${url}`, } as const }\n